import Head from 'next/head'
import { BaseItem, Item } from '@/models/item'
import { Gemstone } from '@/models/gemstone.enum'
import { getApiBazaar, getApiItems } from '@/services/hypixel-api'
import { Product, Products } from '@/models/product'
import { GemstoneUtils } from '@/services/gemstone-utils'
import { MinecraftUtils } from '@/services/minecraft-utils'
import { GEMSTONE_CONFIG } from '@/models/gemstone.config'
import StoneTypeComponent from '@/components/stone-type'
import { useState } from 'react'
import { DisplayMode } from '@/models/display-mode.enum'
import DisplayModeSwitch from '@/components/display-mode-switch'

export default function Home({
  gemstones
}: {
  gemstones: {
    [stone in Gemstone]: Item[]
  }
}) {

  const [displayMode, setDisplayMode] = useState(DisplayMode.BUY);

  return (
    <>
      <Head>
        <title>Bazaar flip</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <nav className='fixed w-full p-4 bg-gray-800/40 border-b border-gray-700 backdrop-blur-xl shadow-xl'>
        <div className='max-w-3xl w-full mx-auto flex max-md:flex-col max-md:gap-3 items-center'>
          <h1 className="text-4xl font-bold text-indigo-200 flex-1">Bazaar flip</h1>
          <DisplayModeSwitch displayMode={displayMode} setDisplayMode={setDisplayMode} />
        </div>
      </nav>


      <main className="p-8 max-w-3xl mx-auto bg-gray-800 border-l border-r border-gray-700 shadow flex flex-col gap-8 pt-40 md:pt-28">

        <div className="flex flex-col gap-8">

          {Object.values(Gemstone)
            .filter(gemstoneType => gemstones[gemstoneType]?.length > 0)
            .map(gemstoneType => <StoneTypeComponent
              displayMode={displayMode}
              gemstoneType={gemstoneType}
              items={gemstones[gemstoneType]}
              key={gemstoneType} />)}

        </div>

      </main>
    </>
  )
}

export async function getServerSideProps() {

  // Getting gemstones
  const itemsRes = await getApiItems();

  const baseItems = itemsRes.data.items
    .filter((item: BaseItem) => Object
      .values(Gemstone).some(gemstone => item.name.includes(gemstone)))
    .sort((a: BaseItem, b: BaseItem) => a.name.localeCompare(b.name));;

  // Getting bazaar
  const bazaarRes = await getApiBazaar();

  // Merging gemstones and bazaar
  const itemIds = baseItems.map(baseItems => baseItems.id);

  const products = Object.values(bazaarRes.data.products)
    .filter((product: Product) => itemIds.includes(product.product_id))
    .reduce((acc: Products, product: Product) => ({
      ...acc,
      [product.product_id]: product
    }), {} as Products);

  const findInBazaar = (productId: string): { sellPrice: number, buyPrice: number } => {
    const product = products[productId];
    return {
      sellPrice: product.quick_status.sellPrice,
      buyPrice: product.quick_status.buyPrice,
    }
  }

  // Populate missing items category

  const items: Item[] = baseItems.map((item) => {
    const bazaar = findInBazaar(item.id);
    const stoneCategory = GemstoneUtils.getGemstoneCategory(item.name);
    const quantityToPerfect = GEMSTONE_CONFIG[stoneCategory].quantityToPerfect;
    return {
      ...item,
      sellPrice: bazaar.sellPrice,
      buyPrice: bazaar.buyPrice,
      stoneCategory,
      stoneType: GemstoneUtils.getGemstoneType(item.name),
      skinUrl: MinecraftUtils.getSkinUrl(item.skin),
      quantityToPerfect,
      buyPriceToPerfect: bazaar.buyPrice * quantityToPerfect,
      sellPriceToPerfect: bazaar.sellPrice * quantityToPerfect,
    };

  });

  // Grouping gemstones by type
  const gemstones = items.reduce((acc, item) => {
    return {
      ...acc,
      [item.stoneType]: [...(acc[item.stoneType] || []), item]
    }
  }, {} as { [stone in Gemstone]: Item[] });

  // Sort each gemstone by category
  Object.values(Gemstone).forEach(gemstoneType => {
    gemstones[gemstoneType].sort(GemstoneUtils.sortByCategory);
  });

  return {
    props: {
      gemstones
    }, // will be passed to the page component as props
  }
}